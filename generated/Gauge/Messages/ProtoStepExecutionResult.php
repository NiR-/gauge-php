<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spec.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 *&#47; A proto object representing Step Execution result
 * </pre>
 *
 * Protobuf type <code>gauge.messages.ProtoStepExecutionResult</code>
 */
class ProtoStepExecutionResult extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     *&#47; The actual result of the execution
     * </pre>
     *
     * <code>.gauge.messages.ProtoExecutionResult executionResult = 1;</code>
     */
    private $executionResult = null;
    /**
     * <pre>
     *&#47; Contains a 'before' hook failure message. This happens when the `before_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure preHookFailure = 2;</code>
     */
    private $preHookFailure = null;
    /**
     * <pre>
     *&#47; Contains a 'after' hook failure message. This happens when the `after_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure postHookFailure = 3;</code>
     */
    private $postHookFailure = null;
    /**
     * <code>bool skipped = 4;</code>
     */
    private $skipped = false;
    /**
     * <code>string skippedReason = 5;</code>
     */
    private $skippedReason = '';

    public function __construct() {
        \GPBMetadata\Spec::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     *&#47; The actual result of the execution
     * </pre>
     *
     * <code>.gauge.messages.ProtoExecutionResult executionResult = 1;</code>
     */
    public function getExecutionResult()
    {
        return $this->executionResult;
    }

    /**
     * <pre>
     *&#47; The actual result of the execution
     * </pre>
     *
     * <code>.gauge.messages.ProtoExecutionResult executionResult = 1;</code>
     */
    public function setExecutionResult(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\ProtoExecutionResult::class);
        $this->executionResult = $var;
    }

    /**
     * <pre>
     *&#47; Contains a 'before' hook failure message. This happens when the `before_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure preHookFailure = 2;</code>
     */
    public function getPreHookFailure()
    {
        return $this->preHookFailure;
    }

    /**
     * <pre>
     *&#47; Contains a 'before' hook failure message. This happens when the `before_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure preHookFailure = 2;</code>
     */
    public function setPreHookFailure(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\ProtoHookFailure::class);
        $this->preHookFailure = $var;
    }

    /**
     * <pre>
     *&#47; Contains a 'after' hook failure message. This happens when the `after_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure postHookFailure = 3;</code>
     */
    public function getPostHookFailure()
    {
        return $this->postHookFailure;
    }

    /**
     * <pre>
     *&#47; Contains a 'after' hook failure message. This happens when the `after_step` hook has an error.
     * </pre>
     *
     * <code>.gauge.messages.ProtoHookFailure postHookFailure = 3;</code>
     */
    public function setPostHookFailure(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\ProtoHookFailure::class);
        $this->postHookFailure = $var;
    }

    /**
     * <code>bool skipped = 4;</code>
     */
    public function getSkipped()
    {
        return $this->skipped;
    }

    /**
     * <code>bool skipped = 4;</code>
     */
    public function setSkipped($var)
    {
        GPBUtil::checkBool($var);
        $this->skipped = $var;
    }

    /**
     * <code>string skippedReason = 5;</code>
     */
    public function getSkippedReason()
    {
        return $this->skippedReason;
    }

    /**
     * <code>string skippedReason = 5;</code>
     */
    public function setSkippedReason($var)
    {
        GPBUtil::checkString($var, True);
        $this->skippedReason = $var;
    }

}

