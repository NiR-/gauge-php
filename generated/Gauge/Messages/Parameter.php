<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spec.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 *&#47; A proto object representing Fragment.
 * </pre>
 *
 * Protobuf type <code>gauge.messages.Parameter</code>
 */
class Parameter extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     *&#47; Type of the Parameter. Valid values: Static, Dynamic, Special_String, Special_Table, Table
     * </pre>
     *
     * <code>.gauge.messages.Parameter.ParameterType parameterType = 1;</code>
     */
    private $parameterType = 0;
    /**
     * <pre>
     *&#47; Holds the value of the parameter
     * </pre>
     *
     * <code>string value = 2;</code>
     */
    private $value = '';
    /**
     * <pre>
     *&#47; Holds the name of the parameter, used as Key to lookup the value.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    private $name = '';
    /**
     * <pre>
     *&#47; Holds the table value, if parameterType=Table or Special_Table
     * </pre>
     *
     * <code>.gauge.messages.ProtoTable table = 4;</code>
     */
    private $table = null;

    public function __construct() {
        \GPBMetadata\Spec::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     *&#47; Type of the Parameter. Valid values: Static, Dynamic, Special_String, Special_Table, Table
     * </pre>
     *
     * <code>.gauge.messages.Parameter.ParameterType parameterType = 1;</code>
     */
    public function getParameterType()
    {
        return $this->parameterType;
    }

    /**
     * <pre>
     *&#47; Type of the Parameter. Valid values: Static, Dynamic, Special_String, Special_Table, Table
     * </pre>
     *
     * <code>.gauge.messages.Parameter.ParameterType parameterType = 1;</code>
     */
    public function setParameterType($var)
    {
        GPBUtil::checkEnum($var, \Gauge\Messages\Parameter_ParameterType::class);
        $this->parameterType = $var;
    }

    /**
     * <pre>
     *&#47; Holds the value of the parameter
     * </pre>
     *
     * <code>string value = 2;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     *&#47; Holds the value of the parameter
     * </pre>
     *
     * <code>string value = 2;</code>
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->value = $var;
    }

    /**
     * <pre>
     *&#47; Holds the name of the parameter, used as Key to lookup the value.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     *&#47; Holds the name of the parameter, used as Key to lookup the value.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     *&#47; Holds the table value, if parameterType=Table or Special_Table
     * </pre>
     *
     * <code>.gauge.messages.ProtoTable table = 4;</code>
     */
    public function getTable()
    {
        return $this->table;
    }

    /**
     * <pre>
     *&#47; Holds the table value, if parameterType=Table or Special_Table
     * </pre>
     *
     * <code>.gauge.messages.ProtoTable table = 4;</code>
     */
    public function setTable(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\ProtoTable::class);
        $this->table = $var;
    }

}

