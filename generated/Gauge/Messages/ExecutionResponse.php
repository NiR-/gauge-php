<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api_v2.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * ExecutionResponse defines the structure of response for ExecutionRequest message
 * </pre>
 *
 * Protobuf type <code>gauge.messages.ExecutionResponse</code>
 */
class ExecutionResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Response type
     * </pre>
     *
     * <code>.gauge.messages.ExecutionResponse.Type type = 1;</code>
     */
    private $type = 0;
    /**
     * <pre>
     * An identifier for the current execution result. This field is populated only for spec/scenario result.
     * For spec, the value will be the filename.
     * For scenario, the value will be filename:scenario_heading_line_num.
     * </pre>
     *
     * <code>string ID = 2;</code>
     */
    private $ID = '';
    /**
     * <pre>
     * Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
     * </pre>
     *
     * <code>.gauge.messages.Result result = 3;</code>
     */
    private $result = null;
    /**
     * <pre>
     * Contains the processId of the language runner used for execution.
     * </pre>
     *
     * <code>int32 RunnerProcessId = 4;</code>
     */
    private $RunnerProcessId = 0;

    public function __construct() {
        \GPBMetadata\ApiV2::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Response type
     * </pre>
     *
     * <code>.gauge.messages.ExecutionResponse.Type type = 1;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <pre>
     * Response type
     * </pre>
     *
     * <code>.gauge.messages.ExecutionResponse.Type type = 1;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Gauge\Messages\ExecutionResponse_Type::class);
        $this->type = $var;
    }

    /**
     * <pre>
     * An identifier for the current execution result. This field is populated only for spec/scenario result.
     * For spec, the value will be the filename.
     * For scenario, the value will be filename:scenario_heading_line_num.
     * </pre>
     *
     * <code>string ID = 2;</code>
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * <pre>
     * An identifier for the current execution result. This field is populated only for spec/scenario result.
     * For spec, the value will be the filename.
     * For scenario, the value will be filename:scenario_heading_line_num.
     * </pre>
     *
     * <code>string ID = 2;</code>
     */
    public function setID($var)
    {
        GPBUtil::checkString($var, True);
        $this->ID = $var;
    }

    /**
     * <pre>
     * Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
     * </pre>
     *
     * <code>.gauge.messages.Result result = 3;</code>
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * <pre>
     * Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
     * </pre>
     *
     * <code>.gauge.messages.Result result = 3;</code>
     */
    public function setResult(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\Result::class);
        $this->result = $var;
    }

    /**
     * <pre>
     * Contains the processId of the language runner used for execution.
     * </pre>
     *
     * <code>int32 RunnerProcessId = 4;</code>
     */
    public function getRunnerProcessId()
    {
        return $this->RunnerProcessId;
    }

    /**
     * <pre>
     * Contains the processId of the language runner used for execution.
     * </pre>
     *
     * <code>int32 RunnerProcessId = 4;</code>
     */
    public function setRunnerProcessId($var)
    {
        GPBUtil::checkInt32($var);
        $this->RunnerProcessId = $var;
    }

}

