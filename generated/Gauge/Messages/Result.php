<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api_v2.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>gauge.messages.Result</code>
 */
class Result extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>.gauge.messages.Result.Status status = 1;</code>
     */
    private $status = 0;
    /**
     * <pre>
     * Contains the Execution errors and its details
     * </pre>
     *
     * <code>repeated .gauge.messages.Result.ExecutionError errors = 2;</code>
     */
    private $errors;
    /**
     * <pre>
     * Specifies the execution time
     * </pre>
     *
     * <code>int64 executionTime = 3;</code>
     */
    private $executionTime = 0;
    /**
     * <pre>
     * Contains the console output messages
     * </pre>
     *
     * <code>string stdout = 4;</code>
     */
    private $stdout = '';
    /**
     * <pre>
     * Holds the before hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError beforeHookFailure = 5;</code>
     */
    private $beforeHookFailure = null;
    /**
     * <pre>
     * Holds the after hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError afterHookFailure = 6;</code>
     */
    private $afterHookFailure = null;
    /**
     * <pre>
     * Holds the table row number (starting with 1) against which the scenario was executed.
     * This field is populated only for data table driven scenarios.
     * </pre>
     *
     * <code>int64 tableRowNumber = 7;</code>
     */
    private $tableRowNumber = 0;

    public function __construct() {
        \GPBMetadata\ApiV2::initOnce();
        parent::__construct();
    }

    /**
     * <code>.gauge.messages.Result.Status status = 1;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <code>.gauge.messages.Result.Status status = 1;</code>
     */
    public function setStatus($var)
    {
        GPBUtil::checkEnum($var, \Gauge\Messages\Result_Status::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * Contains the Execution errors and its details
     * </pre>
     *
     * <code>repeated .gauge.messages.Result.ExecutionError errors = 2;</code>
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * <pre>
     * Contains the Execution errors and its details
     * </pre>
     *
     * <code>repeated .gauge.messages.Result.ExecutionError errors = 2;</code>
     */
    public function setErrors(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Gauge\Messages\Result_ExecutionError::class);
        $this->errors = $var;
    }

    /**
     * <pre>
     * Specifies the execution time
     * </pre>
     *
     * <code>int64 executionTime = 3;</code>
     */
    public function getExecutionTime()
    {
        return $this->executionTime;
    }

    /**
     * <pre>
     * Specifies the execution time
     * </pre>
     *
     * <code>int64 executionTime = 3;</code>
     */
    public function setExecutionTime($var)
    {
        GPBUtil::checkInt64($var);
        $this->executionTime = $var;
    }

    /**
     * <pre>
     * Contains the console output messages
     * </pre>
     *
     * <code>string stdout = 4;</code>
     */
    public function getStdout()
    {
        return $this->stdout;
    }

    /**
     * <pre>
     * Contains the console output messages
     * </pre>
     *
     * <code>string stdout = 4;</code>
     */
    public function setStdout($var)
    {
        GPBUtil::checkString($var, True);
        $this->stdout = $var;
    }

    /**
     * <pre>
     * Holds the before hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError beforeHookFailure = 5;</code>
     */
    public function getBeforeHookFailure()
    {
        return $this->beforeHookFailure;
    }

    /**
     * <pre>
     * Holds the before hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError beforeHookFailure = 5;</code>
     */
    public function setBeforeHookFailure(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\Result_ExecutionError::class);
        $this->beforeHookFailure = $var;
    }

    /**
     * <pre>
     * Holds the after hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError afterHookFailure = 6;</code>
     */
    public function getAfterHookFailure()
    {
        return $this->afterHookFailure;
    }

    /**
     * <pre>
     * Holds the after hook failure
     * </pre>
     *
     * <code>.gauge.messages.Result.ExecutionError afterHookFailure = 6;</code>
     */
    public function setAfterHookFailure(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\Result_ExecutionError::class);
        $this->afterHookFailure = $var;
    }

    /**
     * <pre>
     * Holds the table row number (starting with 1) against which the scenario was executed.
     * This field is populated only for data table driven scenarios.
     * </pre>
     *
     * <code>int64 tableRowNumber = 7;</code>
     */
    public function getTableRowNumber()
    {
        return $this->tableRowNumber;
    }

    /**
     * <pre>
     * Holds the table row number (starting with 1) against which the scenario was executed.
     * This field is populated only for data table driven scenarios.
     * </pre>
     *
     * <code>int64 tableRowNumber = 7;</code>
     */
    public function setTableRowNumber($var)
    {
        GPBUtil::checkInt64($var);
        $this->tableRowNumber = $var;
    }

}

