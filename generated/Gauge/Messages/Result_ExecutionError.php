<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api_v2.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * ExecutionError represents the failure during execution along with details of failure
 * </pre>
 *
 * Protobuf type <code>gauge.messages.Result.ExecutionError</code>
 */
class Result_ExecutionError extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Error message from the failure
     * </pre>
     *
     * <code>string errorMessage = 1;</code>
     */
    private $errorMessage = '';
    /**
     * <pre>
     * Stacktrace from the failure
     * </pre>
     *
     * <code>string stackTrace = 2;</code>
     */
    private $stackTrace = '';
    /**
     * <pre>
     * Byte array holding the screenshot taken at the time of failure.
     * </pre>
     *
     * <code>bytes screenshot = 3;</code>
     */
    private $screenshot = '';

    public function __construct() {
        \GPBMetadata\ApiV2::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Error message from the failure
     * </pre>
     *
     * <code>string errorMessage = 1;</code>
     */
    public function getErrorMessage()
    {
        return $this->errorMessage;
    }

    /**
     * <pre>
     * Error message from the failure
     * </pre>
     *
     * <code>string errorMessage = 1;</code>
     */
    public function setErrorMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->errorMessage = $var;
    }

    /**
     * <pre>
     * Stacktrace from the failure
     * </pre>
     *
     * <code>string stackTrace = 2;</code>
     */
    public function getStackTrace()
    {
        return $this->stackTrace;
    }

    /**
     * <pre>
     * Stacktrace from the failure
     * </pre>
     *
     * <code>string stackTrace = 2;</code>
     */
    public function setStackTrace($var)
    {
        GPBUtil::checkString($var, True);
        $this->stackTrace = $var;
    }

    /**
     * <pre>
     * Byte array holding the screenshot taken at the time of failure.
     * </pre>
     *
     * <code>bytes screenshot = 3;</code>
     */
    public function getScreenshot()
    {
        return $this->screenshot;
    }

    /**
     * <pre>
     * Byte array holding the screenshot taken at the time of failure.
     * </pre>
     *
     * <code>bytes screenshot = 3;</code>
     */
    public function setScreenshot($var)
    {
        GPBUtil::checkString($var, False);
        $this->screenshot = $var;
    }

}

