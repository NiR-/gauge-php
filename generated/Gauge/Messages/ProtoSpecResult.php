<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spec.proto

namespace Gauge\Messages;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 *&#47; A proto object representing the result of Spec execution.
 * </pre>
 *
 * Protobuf type <code>gauge.messages.ProtoSpecResult</code>
 */
class ProtoSpecResult extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     *&#47; Represents the corresponding Specification
     * </pre>
     *
     * <code>.gauge.messages.ProtoSpec protoSpec = 1;</code>
     */
    private $protoSpec = null;
    /**
     * <pre>
     *&#47; Holds the number of Scenarios executed
     * </pre>
     *
     * <code>int32 scenarioCount = 2;</code>
     */
    private $scenarioCount = 0;
    /**
     * <pre>
     *&#47; Holds the number of Scenarios failed
     * </pre>
     *
     * <code>int32 scenarioFailedCount = 3;</code>
     */
    private $scenarioFailedCount = 0;
    /**
     * <pre>
     *&#47; Flag to indicate failure
     * </pre>
     *
     * <code>bool failed = 4;</code>
     */
    private $failed = false;
    /**
     * <pre>
     *&#47; Holds the row numbers, which caused the execution to fail.
     * </pre>
     *
     * <code>repeated int32 failedDataTableRows = 5;</code>
     */
    private $failedDataTableRows;
    /**
     * <pre>
     *&#47; Holds the time taken for executing the spec.
     * </pre>
     *
     * <code>int64 executionTime = 6;</code>
     */
    private $executionTime = 0;
    /**
     * <pre>
     *&#47; Flag to indicate if spec is skipped
     * </pre>
     *
     * <code>bool skipped = 7;</code>
     */
    private $skipped = false;
    /**
     * <pre>
     *&#47; Holds the number of Scenarios skipped
     * </pre>
     *
     * <code>int32 scenarioSkippedCount = 9;</code>
     */
    private $scenarioSkippedCount = 0;
    /**
     * <pre>
     *&#47; Holds the row numbers, for which the execution skipped.
     * </pre>
     *
     * <code>repeated int32 skippedDataTableRows = 10;</code>
     */
    private $skippedDataTableRows;
    /**
     * <pre>
     *&#47; Holds parse, validation and skipped errors.
     * </pre>
     *
     * <code>repeated .gauge.messages.Error errors = 11;</code>
     */
    private $errors;

    public function __construct() {
        \GPBMetadata\Spec::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     *&#47; Represents the corresponding Specification
     * </pre>
     *
     * <code>.gauge.messages.ProtoSpec protoSpec = 1;</code>
     */
    public function getProtoSpec()
    {
        return $this->protoSpec;
    }

    /**
     * <pre>
     *&#47; Represents the corresponding Specification
     * </pre>
     *
     * <code>.gauge.messages.ProtoSpec protoSpec = 1;</code>
     */
    public function setProtoSpec(&$var)
    {
        GPBUtil::checkMessage($var, \Gauge\Messages\ProtoSpec::class);
        $this->protoSpec = $var;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios executed
     * </pre>
     *
     * <code>int32 scenarioCount = 2;</code>
     */
    public function getScenarioCount()
    {
        return $this->scenarioCount;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios executed
     * </pre>
     *
     * <code>int32 scenarioCount = 2;</code>
     */
    public function setScenarioCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->scenarioCount = $var;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios failed
     * </pre>
     *
     * <code>int32 scenarioFailedCount = 3;</code>
     */
    public function getScenarioFailedCount()
    {
        return $this->scenarioFailedCount;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios failed
     * </pre>
     *
     * <code>int32 scenarioFailedCount = 3;</code>
     */
    public function setScenarioFailedCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->scenarioFailedCount = $var;
    }

    /**
     * <pre>
     *&#47; Flag to indicate failure
     * </pre>
     *
     * <code>bool failed = 4;</code>
     */
    public function getFailed()
    {
        return $this->failed;
    }

    /**
     * <pre>
     *&#47; Flag to indicate failure
     * </pre>
     *
     * <code>bool failed = 4;</code>
     */
    public function setFailed($var)
    {
        GPBUtil::checkBool($var);
        $this->failed = $var;
    }

    /**
     * <pre>
     *&#47; Holds the row numbers, which caused the execution to fail.
     * </pre>
     *
     * <code>repeated int32 failedDataTableRows = 5;</code>
     */
    public function getFailedDataTableRows()
    {
        return $this->failedDataTableRows;
    }

    /**
     * <pre>
     *&#47; Holds the row numbers, which caused the execution to fail.
     * </pre>
     *
     * <code>repeated int32 failedDataTableRows = 5;</code>
     */
    public function setFailedDataTableRows(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->failedDataTableRows = $var;
    }

    /**
     * <pre>
     *&#47; Holds the time taken for executing the spec.
     * </pre>
     *
     * <code>int64 executionTime = 6;</code>
     */
    public function getExecutionTime()
    {
        return $this->executionTime;
    }

    /**
     * <pre>
     *&#47; Holds the time taken for executing the spec.
     * </pre>
     *
     * <code>int64 executionTime = 6;</code>
     */
    public function setExecutionTime($var)
    {
        GPBUtil::checkInt64($var);
        $this->executionTime = $var;
    }

    /**
     * <pre>
     *&#47; Flag to indicate if spec is skipped
     * </pre>
     *
     * <code>bool skipped = 7;</code>
     */
    public function getSkipped()
    {
        return $this->skipped;
    }

    /**
     * <pre>
     *&#47; Flag to indicate if spec is skipped
     * </pre>
     *
     * <code>bool skipped = 7;</code>
     */
    public function setSkipped($var)
    {
        GPBUtil::checkBool($var);
        $this->skipped = $var;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios skipped
     * </pre>
     *
     * <code>int32 scenarioSkippedCount = 9;</code>
     */
    public function getScenarioSkippedCount()
    {
        return $this->scenarioSkippedCount;
    }

    /**
     * <pre>
     *&#47; Holds the number of Scenarios skipped
     * </pre>
     *
     * <code>int32 scenarioSkippedCount = 9;</code>
     */
    public function setScenarioSkippedCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->scenarioSkippedCount = $var;
    }

    /**
     * <pre>
     *&#47; Holds the row numbers, for which the execution skipped.
     * </pre>
     *
     * <code>repeated int32 skippedDataTableRows = 10;</code>
     */
    public function getSkippedDataTableRows()
    {
        return $this->skippedDataTableRows;
    }

    /**
     * <pre>
     *&#47; Holds the row numbers, for which the execution skipped.
     * </pre>
     *
     * <code>repeated int32 skippedDataTableRows = 10;</code>
     */
    public function setSkippedDataTableRows(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->skippedDataTableRows = $var;
    }

    /**
     * <pre>
     *&#47; Holds parse, validation and skipped errors.
     * </pre>
     *
     * <code>repeated .gauge.messages.Error errors = 11;</code>
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * <pre>
     *&#47; Holds parse, validation and skipped errors.
     * </pre>
     *
     * <code>repeated .gauge.messages.Error errors = 11;</code>
     */
    public function setErrors(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Gauge\Messages\Error::class);
        $this->errors = $var;
    }

}

